{"version":3,"file":"static/js/505.cdbef6fd.chunk.js","mappings":"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","sources":["layouts/Header.js","views/ui/FarmTable.js","components/farms/FarmContents.js","components/farms/device.js","components/farms/Devicetable.js","views/FarmManage.js"],"sourcesContent":["import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport {\r\n  Navbar,\r\n  Collapse,\r\n  Nav,\r\n  NavItem,\r\n  NavbarBrand,\r\n  Button,\r\n} from \"reactstrap\";\r\nimport NextGreenLogo from \"../assets/images/logos/NextGreen.png\";\r\nimport \"../assets/scss/layout/header.scss\";\r\n\r\nconst Header = (props) => {\r\n  const [isOpen, setIsOpen] = React.useState(false);\r\n  const MyComponent = () => {\r\n    return <img src={NextGreenLogo} alt=\"NextGreen Logo\" />;\r\n  };\r\n  const Handletoggle = () => {\r\n    setIsOpen(!isOpen);\r\n  };\r\n  const showMobilemenu = () => {\r\n    document.getElementById(\"sidebarArea\").classList.toggle(\"showSidebar\");\r\n  };\r\n  const navClassName = \"nav-link\" + (props.navClassName ? \" \" + props.navClassName : \"\");\r\n  return (\r\n    <Navbar color=\"#273544\" dark expand=\"md\">\r\n      <div className=\"d-flex align-items-center\">\r\n        <NavbarBrand href=\"/\" className=\"d-lg-none\">\r\n          <MyComponent />\r\n        </NavbarBrand>\r\n        <Button\r\n          color=\"dark\"\r\n          className=\"d-lg-none\"\r\n          onClick={() => showMobilemenu()}\r\n        >\r\n          <i className=\"bi bi-list\"></i>\r\n        </Button>\r\n      </div>\r\n      <div className=\"hstack gap-2\">\r\n        <Button\r\n          color=\"dark\"\r\n          size=\"sm\"\r\n          className=\"d-sm-block d-md-none\"\r\n          onClick={Handletoggle}\r\n        >\r\n          {isOpen ? (\r\n            <i className=\"bi bi-x\"></i>\r\n          ) : (\r\n            <i className=\"bi bi-three-dots-vertical\"></i>\r\n          )}\r\n        </Button>\r\n      </div>\r\n\r\n      <Collapse navbar isOpen={isOpen}>\r\n        <Nav className=\"me-auto\" navbar>\r\n          <NavItem>\r\n            <Link to={props.link} className={navClassName} >\r\n              {props.title}\r\n            </Link>\r\n          </NavItem>\r\n        </Nav>\r\n      </Collapse>\r\n    </Navbar>\r\n  );\r\n};\r\n\r\nexport default Header;\r\n","import {Button, FormGroup, Input, Label, Table} from \"reactstrap\";\r\nimport React, {useEffect, useState} from \"react\";\r\nimport \"../../assets/scss/layout/table.scss\"\r\n\r\n\r\nfunction FarmTable(props) {\r\n\r\n    const [selectedItem, setSelectedItem] = useState(null);\r\n\r\n\r\n    const handleCheckboxChange = (item) => {\r\n        const newData = {\r\n            systemCode: item.systemCode,\r\n            systemAddress: item.systemAddress,\r\n            systemPoint: item.systemPoint.x+\"/\"+item.systemPoint.y,\r\n            createDate: item.createDate,\r\n            memberId: item.memberId,\r\n            systemNote: item.systemNote\r\n        };\r\n        props.setFarmData(newData);\r\n\r\n        if (selectedItem && selectedItem.systemCode === item.systemCode) {\r\n            setSelectedItem(null);\r\n        } else {\r\n            setSelectedItem(item);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <Table className={props.customClassName} hover size=\"\">\r\n            <thead>\r\n            <tr className={\"table-head\"}>\r\n                {props.content.map((item, index) => (\r\n                    <th key={index}>{item}</th>\r\n                ))}\r\n            </tr>\r\n            </thead>\r\n            <tbody>\r\n            {props.tdData.map((item, index) => (\r\n                <tr key={index}>\r\n                    <td>\r\n                        <FormGroup check inline>\r\n                            <Input\r\n                                type=\"checkbox\"\r\n                                onChange={() => handleCheckboxChange(item)}\r\n                                checked={selectedItem && selectedItem.systemCode === item.systemCode}\r\n                            />\r\n                        </FormGroup>\r\n                    </td>\r\n                    <td>{item.systemCode}</td>\r\n                    <td>{item.systemPoint.x}, {item.systemPoint.y}</td>\r\n                    <td>{item.systemAddress}</td>\r\n                    <td>{item.memberId}</td>\r\n                    <td>{item.createDate}</td>\r\n                </tr>\r\n            ))}\r\n            </tbody>\r\n        </Table>\r\n    );\r\n\r\n}\r\nexport default FarmTable","import {Button, Col, Row} from \"reactstrap\";\r\nimport DataJson from \"./DataJson\";\r\n\r\nfunction FarmContents(props){\r\n    return <Row className={'farm-row'}>\r\n        <Col xl=\"12\" className={'farm-col'}>\r\n            <h4>농장 관리</h4>\r\n            <Row  xs={4} className={'row-box'}>\r\n                <Col sm={2} className={'farm-col2'}>\r\n                    농장명\r\n                </Col>\r\n                <Col className={\"col-box\"}>\r\n                    <input\r\n                        onChange={props.handleChange}\r\n                        name=\"systemCode\"\r\n                        value={props.farmTbodyData.systemCode || \"\"}\r\n                        className={'farm-input'}\r\n                        placeholder={props.farmTbodyData.systemCode}\r\n                    />\r\n                </Col>\r\n                <Col sm={2}>\r\n                    주소\r\n                </Col>\r\n                <Col className={\"col-box\"}>\r\n                    <input\r\n                        onChange={props.handleChange}\r\n                        name=\"systemAddress\"\r\n                        value={props.farmTbodyData.systemAddress || \" \"}\r\n                        className={'farm-input'}\r\n                        placeholder={props.farmTbodyData.systemAddress}\r\n                    />\r\n                </Col>\r\n                <Col sm={2} className={'farm-col2'}>\r\n                    좌표\r\n                </Col>\r\n                <Col className={\"col-box\"}>\r\n                    <input\r\n                        onChange={props.handleChange}\r\n                        name=\"systemPoint\"\r\n                        value={props.farmTbodyData.systemPoint || \"\"}\r\n                        className={'farm-input'}\r\n                        placeholder={props.farmTbodyData.systemPoint}\r\n                    />\r\n                </Col>\r\n                <Col sm={2} className={\"p-grey\"}>\r\n                    날짜\r\n                </Col>\r\n                <Col className={\"col-box p-grey\"}>\r\n                    <p className={\"col-p-content\"}>{props.farmTbodyData.createDate}</p>\r\n                </Col>\r\n\r\n                <Col sm={2} className={'farm-col2 p-grey'}>\r\n                    관리자\r\n                </Col>\r\n                <Col className={\"col-box p-grey\"}>\r\n                    <p className={\"col-p-content\"}>{props.farmTbodyData.memberId}</p>\r\n                </Col>\r\n                <Col sm={2}>\r\n                    비고\r\n                </Col>\r\n                <Col className={\"col-box\"}>\r\n                    <input onChange={props.handleChange}  name={\"farmNote\"} value={props.farmTbodyData.farmNote || \" \"}  className={'farm-input'} placeholder={props.farmTbodyData.farmNote}></input>\r\n                </Col>\r\n            </Row>\r\n\r\n            <Row className={'button-row'}>\r\n                <Col xl={9}></Col>\r\n                <Col className={\"col-button\"}>\r\n                    <Button\r\n                        color=\"primary\"\r\n                        size=\"sm\"\r\n                        className={'btn-red'}\r\n                    >\r\n                        수정\r\n                    </Button>\r\n                </Col>\r\n                <Col className={\"col-button bule\"}>\r\n                    <Button\r\n                        color=\"primary\"\r\n                        size=\"sm\"\r\n                        className={'btn-green'}\r\n                    >\r\n                        신규\r\n                    </Button>\r\n                </Col>\r\n                <Col className={\"col-button green\"}>\r\n                    <Button\r\n                        color=\"primary\"\r\n                        size=\"sm\"\r\n                        className={'btn-blue'}\r\n                    >\r\n                        삭제\r\n                    </Button>\r\n                </Col>\r\n            </Row>\r\n        </Col>\r\n    </Row>\r\n}\r\nexport default FarmContents\r\n\r\n","import {Button, Col, Row} from \"reactstrap\";\r\n\r\nfunction Device(props) {\r\n    const settingKey = Object.keys(props.deviceTbodyData.deviceSettingValue)[0];\r\n    const settingValues = Object.values(props.deviceTbodyData.deviceSettingValue)[0];\r\n    return (\r\n        <div>\r\n            <Row className={'farm-row'}>\r\n                <Col xl=\"12\" className={'farm-col'}>\r\n                    <h4>장치 관리</h4>\r\n                    <Row xs=\"1\" sm=\"2\" md=\"4\" className={'row-box'}>\r\n                        <Col sm={1} className={'farm-col2'}>\r\n                            장치명\r\n                        </Col>\r\n                        <Col sm={1} md={{offset: 0}} className={\"col-box\"}>\r\n                            <input  onChange={props.handleChange}\r\n                                     name=\"deviceId\"\r\n                                     value={props.deviceTbodyData.deviceId || \"\"}\r\n                                     className={'farm-input'}\r\n                                     placeholder={props.deviceTbodyData.deviceId}\r\n                            >\r\n                            </input>\r\n                        </Col>\r\n                        <Col sm={1} md={{offset: 0}}>\r\n                            이 름\r\n                        </Col>\r\n                        <Col sm={1} md={{offset: 0}} className={\"col-box p-grey\"}>\r\n                            <p className={\"col-p-content\"}>{props.deviceTbodyData.name}</p>\r\n                        </Col>\r\n\r\n\r\n                        <Col sm={1} className={'farm-col2'}>\r\n                            장치타입\r\n                        </Col>\r\n                        <Col sm={1} className={\"col-box\"}>\r\n                            <input\r\n                                onChange={(e) => props.handleDeviceKeyChange(e, settingKey, props.deviceTbodyData)}\r\n                                name={settingKey}\r\n                                value={settingKey}\r\n                                className={'farm-input'}\r\n                                placeholder={settingKey}\r\n                            />\r\n                        </Col>\r\n                        <Col sm={1} className={\"p-grey\"}>\r\n                            농장\r\n                        </Col>\r\n                        <Col sm={1} className={\"col-box p-grey\"}>\r\n                            <p className={\"col-p-content\"}>{props.deviceTbodyData.systemCode}</p>\r\n                        </Col>\r\n                        <Col sm={1} className={'farm-col2 p-grey'}>\r\n                            관리자\r\n                        </Col>\r\n                        <Col sm={1} className={\"col-box p-grey\"}>\r\n                            <p className={\"col-p-content\"}>{props.deviceTbodyData.memberId}</p></Col>\r\n                        <Col xs={1} md={{offset: 0}} className={\"col-box input-col left blue\"}>\r\n                            설정값\r\n                        </Col>\r\n                        <Col md={{offset: 0}} className={\"col-box input-setting\"}>\r\n                            <input\r\n                                onChange={event => props.handleDeviceValueChange(event, settingKey, props.deviceTbodyData)}\r\n                                name={\"settingValue\"}\r\n                                value={props.deviceTbodyData.deviceSettingValue[settingKey] ? props.deviceTbodyData.deviceSettingValue[settingKey].settingValue : \"\"}\r\n                                className={'farm-input'}\r\n                                placeholder={settingValues.settingValue}\r\n                            />\r\n                        </Col>\r\n                        <Col xs={1} md={{offset: 0}} className={\"col-box input-col green\"}>\r\n                            적정값\r\n                        </Col>\r\n                        <Col xs={1} md={{offset: 0}} className={\"col-box input-setting\"}>\r\n                            <input\r\n                                onChange={event => props.handleDeviceValueChange(event, settingKey, props.deviceTbodyData)}\r\n                                name={\"lowValue\"}\r\n                                value={props.deviceTbodyData.deviceSettingValue[settingKey] ? props.deviceTbodyData.deviceSettingValue[settingKey].lowValue : \"\"}\r\n                                className={'farm-input'}\r\n                                placeholder={settingValues.lowValue}\r\n                            />\r\n                        </Col>\r\n                        <Col xs={1} md={{offset: 0}} className={\"col-box input-col red\"}>\r\n                            최고값\r\n                        </Col>\r\n                        <Col xs={1} md={{offset: 0}} className={\"col-box input-setting\"}>\r\n                            <input\r\n                                onChange={event => props.handleDeviceValueChange(event, settingKey,props.deviceTbodyData)}\r\n                                name={\"HighValue\"}\r\n                                value={props.deviceTbodyData.deviceSettingValue[settingKey] ? props.deviceTbodyData.deviceSettingValue[settingKey].HighValue : \"\"}\r\n                                className={'farm-input'}\r\n                                placeholder={settingValues.HighValue}\r\n                            />\r\n                        </Col>\r\n                        <Col sm={3}>\r\n                            비고\r\n                        </Col>\r\n                        <Col xl={9} className={\"col-box\"}>\r\n                            <input\r\n                                onChange={props.handleChange}\r\n                                name={\"deviceNote\"}\r\n                                value={props.deviceTbodyData.deviceNote}\r\n                                className={'farm-input'}\r\n                                placeholder={settingValues.deviceNote}\r\n                            /> </Col>\r\n                    </Row>\r\n\r\n                    <Row className={'button-row'}>\r\n                        <Col xl={9}></Col>\r\n                        <Col className={\"col-button\"}>\r\n                            <Button\r\n                                color=\"primary\"\r\n                                size=\"sm\"\r\n                                className={'btn-red'}\r\n                            >\r\n                                삭제\r\n                            </Button>\r\n                        </Col>\r\n                        <Col className={\"col-button bule\"}>\r\n                            <Button\r\n                                color=\"primary\"\r\n                                size=\"sm\"\r\n                                className={'btn-green'}\r\n                            >\r\n                                신규\r\n                            </Button>\r\n                        </Col>\r\n                        <Col className={\"col-button green\"}>\r\n                            <Button\r\n                                color=\"primary\"\r\n                                size=\"sm\"\r\n                                className={'btn-blue'}\r\n                            >\r\n                                수정\r\n                            </Button>\r\n                        </Col>\r\n                    </Row>\r\n                </Col>\r\n            </Row>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Device","import React, {useEffect, useState} from \"react\";\r\nimport {Col, FormGroup, Input, Row, Table} from \"reactstrap\";\r\nimport Device from \"./device\";\r\n\r\nfunction DeviceTable(props) {\r\n    const deviceTheadData = [\r\n        \"\", \"장치명\", \"장치타입\", \"농장\", \"관리자\", \"설정값\", \"적정값\", \"최고값\",\"저장시간\" ,\"비고\"\r\n    ]\r\n\r\n    const [selectedItem, setSelectedItem] = useState(null);\r\n    const [deviceTdData,setDeviceTdData] = useState([\r\n        {\r\n            deviceId: \"next001\",\r\n            memberId: \"aa2\",\r\n            createDate: \"yyyy-MM-dd/HH:mm:ss\",\r\n            deviceSettingValue: \"{\\\"air\\\": {\\\"lowValue\\\": \\\"10\\\", \\\"HighValue\\\": \\\"20\\\", \\\"settingValue\\\": \\\"3.0\\\"}, \\\"led\\\": {\\\"lowValue\\\": \\\"10\\\", \\\"HighValue\\\": \\\"20\\\", \\\"settingValue\\\": \\\"1.2\\\"}, \\\"temp\\\": {\\\"lowValue\\\": \\\"10\\\", \\\"HighValue\\\": \\\"20\\\", \\\"settingValue\\\": \\\"20.5\\\"}}\"\r\n        },\r\n        {\r\n            deviceId: \"next002\",\r\n            memberId: \"aa2\",\r\n            createDate: \"yyyy-MM-dd/HH:mm:ss\",\r\n            deviceSettingValue: \"{\\\"air\\\": {\\\"lowValue\\\": \\\"10\\\", \\\"HighValue\\\": \\\"20\\\", \\\"settingValue\\\": \\\"3.0\\\"}, \\\"led\\\": {\\\"lowValue\\\": \\\"10\\\", \\\"HighValue\\\": \\\"20\\\", \\\"settingValue\\\": \\\"1.2\\\"}, \\\"temp\\\": {\\\"lowValue\\\": \\\"10\\\", \\\"HighValue\\\": \\\"20\\\", \\\"settingValue\\\": \\\"20.5\\\"}}\"\r\n        },\r\n    ])\r\n    useEffect(() => {\r\n        console.log(deviceTbodyData)\r\n    })\r\n    // 변환된 데이터를 저장할 배열\r\n    const [tdDataJson,setTdDataJson] = useState([]);\r\n    const [deviceTbodyData, setDeviceTbodyData] = useState({\r\n        deviceId: \"-\",\r\n        memberId: \"-\",\r\n        createDate: \"-\",\r\n        deviceSettingValue: {\r\n            \"\": {\r\n                lowValue: \"\",\r\n                HighValue: \"\",\r\n                settingValue: \"\"\r\n            }\r\n        }\r\n    });\r\n    const handleChange = (e) => {\r\n        const {name, value} = e.target;\r\n        setDeviceTbodyData({\r\n            ...deviceTbodyData,\r\n            [name]: value,\r\n        });\r\n    };\r\n\r\n    const handleDeviceValueChange = (e, settingKey,deviceTbodyData) => {\r\n        const { name, value } = e.target;\r\n        if (!deviceTbodyData) {\r\n            console.error(\"props.deviceTbodyData is undefined\");\r\n            return;\r\n        }\r\n\r\n        const { deviceSettingValue } = deviceTbodyData;\r\n        if (!deviceSettingValue) {\r\n            console.error(\"props.deviceTbodyData.deviceSettingValue is undefined\");\r\n            return;\r\n        }\r\n\r\n        const updatedDeviceSettingValue = { ...deviceSettingValue };\r\n\r\n        if (updatedDeviceSettingValue.hasOwnProperty(settingKey)) {\r\n            updatedDeviceSettingValue[settingKey] = {\r\n                ...updatedDeviceSettingValue[settingKey],\r\n                [name]: value,\r\n            };\r\n        } else {\r\n            updatedDeviceSettingValue[settingKey] = {\r\n                [name]: value,\r\n            };\r\n        }\r\n\r\n        setDeviceTbodyData(prevState => ({\r\n            ...prevState,\r\n            deviceSettingValue: updatedDeviceSettingValue,\r\n        }));\r\n    };\r\n\r\n    const handleDeviceKeyChange = (e, oldKey,deviceTbodyData) => {\r\n        const newKey = e.target.value;\r\n\r\n        const updatedDeviceTbodyData = { ...deviceTbodyData };\r\n\r\n        updatedDeviceTbodyData.deviceSettingValue[newKey] = { ...updatedDeviceTbodyData.deviceSettingValue[oldKey] };\r\n        delete updatedDeviceTbodyData.deviceSettingValue[oldKey];\r\n\r\n        setDeviceTbodyData(updatedDeviceTbodyData);\r\n    };\r\n\r\n    useEffect(() => {\r\n        const newData = [];\r\n        deviceTdData.forEach(data => {\r\n            const { deviceId, memberId, createDate, deviceSettingValue } = data;\r\n            const settingValues = JSON.parse(deviceSettingValue);\r\n            for (const key in settingValues) {\r\n                if (Object.hasOwnProperty.call(settingValues, key)) {\r\n                    newData.push({ deviceId, memberId, createDate, deviceSettingValue: { [key]: settingValues[key] } });\r\n                }\r\n            }\r\n        });\r\n        setTdDataJson(newData);\r\n    }, []);\r\n\r\n\r\n\r\n    const handleCheckboxChange = (item) => {\r\n        const settingKey = Object.keys(item.deviceSettingValue)[0];\r\n        const settingValues = Object.values(item.deviceSettingValue)[0];\r\n\r\n        const newData = {\r\n            deviceId: item.deviceId,\r\n            memberId: item.memberId,\r\n            createDate: \"-\",\r\n            name:\"-\",\r\n            deviceNote:\"-\",\r\n            deviceSettingValue: {\r\n                [settingKey]: {\r\n                    lowValue: settingValues.lowValue,\r\n                    HighValue: settingValues.HighValue,\r\n                    settingValue: settingValues.settingValue\r\n                }\r\n            }\r\n        };\r\n\r\n        setDeviceTbodyData(newData);\r\n\r\n        if (selectedItem && selectedItem.deviceId === item.deviceId) {\r\n            setSelectedItem(null);\r\n        } else {\r\n            setSelectedItem(item);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div>  <Row className={'farm-row'}>\r\n            <Col xl=\"12\" className={'farm-col'}>\r\n                <h4>장치</h4>\r\n            </Col>\r\n\r\n        <Table className={props.customClassName} hover size=\"\">\r\n            <thead>\r\n            <tr className={\"table-head\"}>\r\n                {deviceTheadData.map((item, index) => (\r\n                    <th key={index}>{item}</th>\r\n                ))}\r\n            </tr>\r\n            </thead>\r\n            <tbody>\r\n            {tdDataJson.map((item, index) => (\r\n                <tr key={index}>\r\n                    <td>\r\n                        <FormGroup check inline>\r\n                            <Input\r\n                                type=\"checkbox\"\r\n                                onChange={() => handleCheckboxChange(item)}\r\n                                checked={selectedItem && selectedItem.deviceId === item.deviceId && selectedItem.deviceSettingValue && Object.keys(item.deviceSettingValue)[0] === Object.keys(selectedItem.deviceSettingValue)[0]}\r\n\r\n                                    />\r\n                        </FormGroup>\r\n                    </td>\r\n                    <td>{item.deviceId}</td>\r\n                    <td>{Object.keys(item.deviceSettingValue)[0]}</td>\r\n                    <td>{item.systemCode}</td>\r\n                    <td>{item.memberId}</td>\r\n                    <td>{Object.values(item.deviceSettingValue)[0].settingValue}</td>\r\n                    <td>{Object.values(item.deviceSettingValue)[0].lowValue}</td>\r\n                    <td>{Object.values(item.deviceSettingValue)[0].HighValue}</td>\r\n                    <td>{item.createDate}</td>\r\n                    <td>{item.farmNote}</td>\r\n                </tr>\r\n            ))}\r\n            </tbody>\r\n        </Table>\r\n        </Row>\r\n\r\n        <Device handleDeviceKeyChange={handleDeviceKeyChange} handleDeviceValueChange={handleDeviceValueChange} handleChange={handleChange} deviceTbodyData={deviceTbodyData} setDeviceTbodyData={setDeviceTbodyData}/>\r\n        </div>\r\n    );\r\n\r\n}\r\nexport default DeviceTable","import {Button, Col, Row} from \"reactstrap\";\r\nimport Header from \"../layouts/Header\";\r\nimport FarmTable from \"./ui/FarmTable\";\r\nimport {useEffect, useState} from \"react\";\r\nimport FarmContents from \"../components/farms/FarmContents\";\r\nimport DeviceTable from \"../components/farms/Devicetable\";\r\n\r\n\r\nconst Farms = () => {\r\n    // contentArea의 높이를 관리할 상태 선언\r\n    const [contentAreaHeight, setContentAreaHeight] = useState(0);\r\n\r\n    useEffect(() => {\r\n        // 페이지 로드 시나 컴포넌트 업데이트 시 contentArea의 높이를 다시 계산\r\n        calculateContentAreaHeight();\r\n        console.log(contentAreaStyle)\r\n    }, []);\r\n\r\n    // contentArea의 높이를 계산하는 함수\r\n    const calculateContentAreaHeight = () => {\r\n        const contentArea = document.querySelector('.contentArea');\r\n        if (contentArea) {\r\n            // contentArea의 자식 요소들의 높이를 합산하여 contentArea의 높이 설정\r\n            const totalHeight = Array.from(contentArea.children).reduce((acc, child) => {\r\n                return acc + child.offsetHeight;\r\n            }, 0);\r\n            setContentAreaHeight(totalHeight);\r\n        }\r\n    };\r\n\r\n    // contentArea의 스타일 설정\r\n    const contentAreaStyle = {\r\n        height: contentAreaHeight + 'px'\r\n    };\r\n    const farmTheadData = [\r\n        \"\", \"농장명\", \"좌표\", \"주소\", \"관리자\", \"날짜\", \"비고\"\r\n    ]\r\n    const [farmTbodyData, setFarmTbodyData] = useState({\r\n        systemCode: \" \",\r\n        systemAddress: \"\",\r\n        systemPoint: \"\",\r\n        createDate: \"\",\r\n        memberId: \"\",\r\n        farmNote: \"-\"\r\n    });\r\n    const [farmTdData, setFarmTdData] = useState([\r\n        {\r\n            systemCode: \"Contain003\",\r\n            systemPoint: {\r\n                x: 123.456,\r\n                y: 987.654\r\n            },\r\n            systemAddress: \"이것은 내 주소\",\r\n            systemAddressSgg: \"sss\",\r\n            memberId: \"aa2\",\r\n            userName: \"name\",\r\n            deviceList: null,\r\n            createDate: \"20240313\"\r\n        },\r\n        {\r\n            systemCode: \"Contain002\",\r\n            systemPoint: {\r\n                x: 123.456,\r\n                y: 987.654\r\n            },\r\n            systemAddress: \"이것은 내 주소\",\r\n            systemAddressSgg: \"sss\",\r\n            memberId: \"aa2\",\r\n            userName: \"name\",\r\n            deviceList: null,\r\n            createDate: \"20240313\"\r\n        },\r\n        {\r\n            systemCode: \"Contain001\",\r\n            systemPoint: {\r\n                x: 123.456,\r\n                y: 987.654\r\n            },\r\n            systemAddress: \"이것은 내 주소\",\r\n            systemAddressSgg: \"sss\",\r\n            memberId: \"aa2\",\r\n            userName: \"name\",\r\n            deviceList: null,\r\n            createDate: \"20240313\"\r\n        }\r\n    ])\r\n    const handleChange = (e) => {\r\n        const {name, value} = e.target;\r\n        setFarmTbodyData({\r\n            ...farmTbodyData,\r\n            [name]: value,\r\n        });\r\n    };\r\n\r\n    return (\r\n        <div id=\"card-wrap\">\r\n            {/*------헤더------*/}\r\n            <Header title={\"농장관리\"} navClassName={\"farm-nav\"}/>\r\n            {/*-----농장 컨텐츠1-----*/}\r\n            <Row className={'farm-row'}>\r\n                <Col xl=\"12\" className={'farm-col'}>\r\n                    <h4>농장</h4>\r\n                    <FarmTable content={farmTheadData} customClassName={'farm-table'} farmData={farmTbodyData}\r\n                               setFarmData={setFarmTbodyData} tdData={farmTdData}/>\r\n                </Col>\r\n            </Row>\r\n            {/*-----농장 컨텐츠2-----*/}\r\n            <FarmContents handleChange={handleChange} farmTbodyData={farmTbodyData}/>\r\n\r\n            {/*-----Device 테이블&& device setting-----*/}\r\n            <DeviceTable/>\r\n\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport default Farms"],"names":["props","_React$useState","React","_React$useState2","_slicedToArray","isOpen","setIsOpen","MyComponent","_jsx","src","NextGreenLogo","alt","navClassName","_jsxs","Navbar","color","dark","expand","children","className","NavbarBrand","href","Button","onClick","document","getElementById","classList","toggle","size","Collapse","navbar","Nav","NavItem","Link","to","link","title","_useState","useState","_useState2","selectedItem","setSelectedItem","Table","customClassName","hover","content","map","item","index","tdData","FormGroup","check","inline","Input","type","onChange","newData","systemCode","systemAddress","systemPoint","x","y","createDate","memberId","systemNote","setFarmData","handleCheckboxChange","checked","Row","Col","xl","xs","sm","handleChange","name","value","farmTbodyData","placeholder","farmNote","settingKey","Object","keys","deviceTbodyData","deviceSettingValue","settingValues","values","md","offset","deviceId","e","handleDeviceKeyChange","event","handleDeviceValueChange","settingValue","lowValue","HighValue","deviceNote","_useState3","_useState4","deviceTdData","useEffect","console","log","_useState5","_useState6","tdDataJson","setTdDataJson","_useState7","_useState8","setDeviceTbodyData","forEach","data","JSON","parse","key","hasOwnProperty","call","push","_defineProperty","Device","oldKey","newKey","target","updatedDeviceTbodyData","_objectSpread","_e$target2","updatedDeviceSettingValue","prevState","error","_e$target","contentAreaHeight","setContentAreaHeight","calculateContentAreaHeight","contentAreaStyle","contentArea","querySelector","totalHeight","Array","from","reduce","acc","child","offsetHeight","height","setFarmTbodyData","systemAddressSgg","userName","deviceList","farmTdData","id","Header","FarmTable","farmData","FarmContents","DeviceTable"],"sourceRoot":""}